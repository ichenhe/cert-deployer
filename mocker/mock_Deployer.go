// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocker

import (
	domain "github.com/ichenhe/cert-deployer/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockDeployer is an autogenerated mock type for the Deployer type
type MockDeployer struct {
	mock.Mock
}

type MockDeployer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeployer) EXPECT() *MockDeployer_Expecter {
	return &MockDeployer_Expecter{mock: &_m.Mock}
}

// Deploy provides a mock function with given fields: assets, cert, key
func (_m *MockDeployer) Deploy(assets []domain.Asseter, cert []byte, key []byte) ([]domain.Asseter, []*domain.DeployError) {
	ret := _m.Called(assets, cert, key)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 []domain.Asseter
	var r1 []*domain.DeployError
	if rf, ok := ret.Get(0).(func([]domain.Asseter, []byte, []byte) ([]domain.Asseter, []*domain.DeployError)); ok {
		return rf(assets, cert, key)
	}
	if rf, ok := ret.Get(0).(func([]domain.Asseter, []byte, []byte) []domain.Asseter); ok {
		r0 = rf(assets, cert, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Asseter)
		}
	}

	if rf, ok := ret.Get(1).(func([]domain.Asseter, []byte, []byte) []*domain.DeployError); ok {
		r1 = rf(assets, cert, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*domain.DeployError)
		}
	}

	return r0, r1
}

// MockDeployer_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockDeployer_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - assets []domain.Asseter
//   - cert []byte
//   - key []byte
func (_e *MockDeployer_Expecter) Deploy(assets interface{}, cert interface{}, key interface{}) *MockDeployer_Deploy_Call {
	return &MockDeployer_Deploy_Call{Call: _e.mock.On("Deploy", assets, cert, key)}
}

func (_c *MockDeployer_Deploy_Call) Run(run func(assets []domain.Asseter, cert []byte, key []byte)) *MockDeployer_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]domain.Asseter), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockDeployer_Deploy_Call) Return(deployedAssets []domain.Asseter, deployErrs []*domain.DeployError) *MockDeployer_Deploy_Call {
	_c.Call.Return(deployedAssets, deployErrs)
	return _c
}

func (_c *MockDeployer_Deploy_Call) RunAndReturn(run func([]domain.Asseter, []byte, []byte) ([]domain.Asseter, []*domain.DeployError)) *MockDeployer_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// ListApplicableAssets provides a mock function with given fields: assetType, cert
func (_m *MockDeployer) ListApplicableAssets(assetType domain.AssetType, cert []byte) ([]domain.Asseter, error) {
	ret := _m.Called(assetType, cert)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicableAssets")
	}

	var r0 []domain.Asseter
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AssetType, []byte) ([]domain.Asseter, error)); ok {
		return rf(assetType, cert)
	}
	if rf, ok := ret.Get(0).(func(domain.AssetType, []byte) []domain.Asseter); ok {
		r0 = rf(assetType, cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Asseter)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AssetType, []byte) error); ok {
		r1 = rf(assetType, cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployer_ListApplicableAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListApplicableAssets'
type MockDeployer_ListApplicableAssets_Call struct {
	*mock.Call
}

// ListApplicableAssets is a helper method to define mock.On call
//   - assetType domain.AssetType
//   - cert []byte
func (_e *MockDeployer_Expecter) ListApplicableAssets(assetType interface{}, cert interface{}) *MockDeployer_ListApplicableAssets_Call {
	return &MockDeployer_ListApplicableAssets_Call{Call: _e.mock.On("ListApplicableAssets", assetType, cert)}
}

func (_c *MockDeployer_ListApplicableAssets_Call) Run(run func(assetType domain.AssetType, cert []byte)) *MockDeployer_ListApplicableAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AssetType), args[1].([]byte))
	})
	return _c
}

func (_c *MockDeployer_ListApplicableAssets_Call) Return(_a0 []domain.Asseter, _a1 error) *MockDeployer_ListApplicableAssets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployer_ListApplicableAssets_Call) RunAndReturn(run func(domain.AssetType, []byte) ([]domain.Asseter, error)) *MockDeployer_ListApplicableAssets_Call {
	_c.Call.Return(run)
	return _c
}

// ListAssets provides a mock function with given fields: assetType
func (_m *MockDeployer) ListAssets(assetType domain.AssetType) ([]domain.Asseter, error) {
	ret := _m.Called(assetType)

	if len(ret) == 0 {
		panic("no return value specified for ListAssets")
	}

	var r0 []domain.Asseter
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AssetType) ([]domain.Asseter, error)); ok {
		return rf(assetType)
	}
	if rf, ok := ret.Get(0).(func(domain.AssetType) []domain.Asseter); ok {
		r0 = rf(assetType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Asseter)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AssetType) error); ok {
		r1 = rf(assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployer_ListAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAssets'
type MockDeployer_ListAssets_Call struct {
	*mock.Call
}

// ListAssets is a helper method to define mock.On call
//   - assetType domain.AssetType
func (_e *MockDeployer_Expecter) ListAssets(assetType interface{}) *MockDeployer_ListAssets_Call {
	return &MockDeployer_ListAssets_Call{Call: _e.mock.On("ListAssets", assetType)}
}

func (_c *MockDeployer_ListAssets_Call) Run(run func(assetType domain.AssetType)) *MockDeployer_ListAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AssetType))
	})
	return _c
}

func (_c *MockDeployer_ListAssets_Call) Return(_a0 []domain.Asseter, _a1 error) *MockDeployer_ListAssets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployer_ListAssets_Call) RunAndReturn(run func(domain.AssetType) ([]domain.Asseter, error)) *MockDeployer_ListAssets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeployer creates a new instance of MockDeployer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeployer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeployer {
	mock := &MockDeployer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

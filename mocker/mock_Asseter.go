// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocker

import (
	domain "github.com/ichenhe/cert-deployer/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAsseter is an autogenerated mock type for the Asseter type
type MockAsseter struct {
	mock.Mock
}

type MockAsseter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAsseter) EXPECT() *MockAsseter_Expecter {
	return &MockAsseter_Expecter{mock: &_m.Mock}
}

// GetBaseInfo provides a mock function with given fields:
func (_m *MockAsseter) GetBaseInfo() *domain.Asset {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseInfo")
	}

	var r0 *domain.Asset
	if rf, ok := ret.Get(0).(func() *domain.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Asset)
		}
	}

	return r0
}

// MockAsseter_GetBaseInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseInfo'
type MockAsseter_GetBaseInfo_Call struct {
	*mock.Call
}

// GetBaseInfo is a helper method to define mock.On call
func (_e *MockAsseter_Expecter) GetBaseInfo() *MockAsseter_GetBaseInfo_Call {
	return &MockAsseter_GetBaseInfo_Call{Call: _e.mock.On("GetBaseInfo")}
}

func (_c *MockAsseter_GetBaseInfo_Call) Run(run func()) *MockAsseter_GetBaseInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsseter_GetBaseInfo_Call) Return(_a0 *domain.Asset) *MockAsseter_GetBaseInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsseter_GetBaseInfo_Call) RunAndReturn(run func() *domain.Asset) *MockAsseter_GetBaseInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAsseter creates a new instance of MockAsseter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsseter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsseter {
	mock := &MockAsseter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

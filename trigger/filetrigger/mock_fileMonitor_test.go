// Code generated by mockery v2.42.1. DO NOT EDIT.

package filetrigger

import (
	fsnotify "github.com/fsnotify/fsnotify"
	mock "github.com/stretchr/testify/mock"
)

// MockfileMonitor is an autogenerated mock type for the fileMonitor type
type MockfileMonitor struct {
	mock.Mock
}

type MockfileMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfileMonitor) EXPECT() *MockfileMonitor_Expecter {
	return &MockfileMonitor_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: name
func (_m *MockfileMonitor) Add(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileMonitor_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockfileMonitor_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - name string
func (_e *MockfileMonitor_Expecter) Add(name interface{}) *MockfileMonitor_Add_Call {
	return &MockfileMonitor_Add_Call{Call: _e.mock.On("Add", name)}
}

func (_c *MockfileMonitor_Add_Call) Run(run func(name string)) *MockfileMonitor_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockfileMonitor_Add_Call) Return(_a0 error) *MockfileMonitor_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockfileMonitor_Add_Call) RunAndReturn(run func(string) error) *MockfileMonitor_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockfileMonitor) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileMonitor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockfileMonitor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockfileMonitor_Expecter) Close() *MockfileMonitor_Close_Call {
	return &MockfileMonitor_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockfileMonitor_Close_Call) Run(run func()) *MockfileMonitor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockfileMonitor_Close_Call) Return(_a0 error) *MockfileMonitor_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockfileMonitor_Close_Call) RunAndReturn(run func() error) *MockfileMonitor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorCh provides a mock function with given fields:
func (_m *MockfileMonitor) ErrorCh() chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorCh")
	}

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// MockfileMonitor_ErrorCh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorCh'
type MockfileMonitor_ErrorCh_Call struct {
	*mock.Call
}

// ErrorCh is a helper method to define mock.On call
func (_e *MockfileMonitor_Expecter) ErrorCh() *MockfileMonitor_ErrorCh_Call {
	return &MockfileMonitor_ErrorCh_Call{Call: _e.mock.On("ErrorCh")}
}

func (_c *MockfileMonitor_ErrorCh_Call) Run(run func()) *MockfileMonitor_ErrorCh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockfileMonitor_ErrorCh_Call) Return(_a0 chan error) *MockfileMonitor_ErrorCh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockfileMonitor_ErrorCh_Call) RunAndReturn(run func() chan error) *MockfileMonitor_ErrorCh_Call {
	_c.Call.Return(run)
	return _c
}

// EventCh provides a mock function with given fields:
func (_m *MockfileMonitor) EventCh() chan fsnotify.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventCh")
	}

	var r0 chan fsnotify.Event
	if rf, ok := ret.Get(0).(func() chan fsnotify.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan fsnotify.Event)
		}
	}

	return r0
}

// MockfileMonitor_EventCh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventCh'
type MockfileMonitor_EventCh_Call struct {
	*mock.Call
}

// EventCh is a helper method to define mock.On call
func (_e *MockfileMonitor_Expecter) EventCh() *MockfileMonitor_EventCh_Call {
	return &MockfileMonitor_EventCh_Call{Call: _e.mock.On("EventCh")}
}

func (_c *MockfileMonitor_EventCh_Call) Run(run func()) *MockfileMonitor_EventCh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockfileMonitor_EventCh_Call) Return(_a0 chan fsnotify.Event) *MockfileMonitor_EventCh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockfileMonitor_EventCh_Call) RunAndReturn(run func() chan fsnotify.Event) *MockfileMonitor_EventCh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfileMonitor creates a new instance of MockfileMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfileMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfileMonitor {
	mock := &MockfileMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

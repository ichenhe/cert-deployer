// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocker

import mock "github.com/stretchr/testify/mock"

// MockTrigger is an autogenerated mock type for the Trigger type
type MockTrigger struct {
	mock.Mock
}

type MockTrigger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrigger) EXPECT() *MockTrigger_Expecter {
	return &MockTrigger_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockTrigger) Close() {
	_m.Called()
}

// MockTrigger_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTrigger_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTrigger_Expecter) Close() *MockTrigger_Close_Call {
	return &MockTrigger_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTrigger_Close_Call) Run(run func()) *MockTrigger_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrigger_Close_Call) Return() *MockTrigger_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTrigger_Close_Call) RunAndReturn(run func()) *MockTrigger_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *MockTrigger) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTrigger_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockTrigger_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockTrigger_Expecter) GetName() *MockTrigger_GetName_Call {
	return &MockTrigger_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockTrigger_GetName_Call) Run(run func()) *MockTrigger_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrigger_GetName_Call) Return(_a0 string) *MockTrigger_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrigger_GetName_Call) RunAndReturn(run func() string) *MockTrigger_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// StartMonitoring provides a mock function with given fields:
func (_m *MockTrigger) StartMonitoring() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartMonitoring")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTrigger_StartMonitoring_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMonitoring'
type MockTrigger_StartMonitoring_Call struct {
	*mock.Call
}

// StartMonitoring is a helper method to define mock.On call
func (_e *MockTrigger_Expecter) StartMonitoring() *MockTrigger_StartMonitoring_Call {
	return &MockTrigger_StartMonitoring_Call{Call: _e.mock.On("StartMonitoring")}
}

func (_c *MockTrigger_StartMonitoring_Call) Run(run func()) *MockTrigger_StartMonitoring_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTrigger_StartMonitoring_Call) Return(_a0 error) *MockTrigger_StartMonitoring_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrigger_StartMonitoring_Call) RunAndReturn(run func() error) *MockTrigger_StartMonitoring_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrigger creates a new instance of MockTrigger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrigger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrigger {
	mock := &MockTrigger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

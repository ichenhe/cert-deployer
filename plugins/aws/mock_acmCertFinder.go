// Code generated by mockery v2.42.1. DO NOT EDIT.

package aws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockacmCertFinder is an autogenerated mock type for the acmCertFinder type
type MockacmCertFinder struct {
	mock.Mock
}

type MockacmCertFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockacmCertFinder) EXPECT() *MockacmCertFinder_Expecter {
	return &MockacmCertFinder_Expecter{mock: &_m.Mock}
}

// FindCertInACM provides a mock function with given fields: ctx, certBundle
func (_m *MockacmCertFinder) FindCertInACM(ctx context.Context, certBundle *certificateBundle) (string, error) {
	ret := _m.Called(ctx, certBundle)

	if len(ret) == 0 {
		panic("no return value specified for FindCertInACM")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *certificateBundle) (string, error)); ok {
		return rf(ctx, certBundle)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *certificateBundle) string); ok {
		r0 = rf(ctx, certBundle)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *certificateBundle) error); ok {
		r1 = rf(ctx, certBundle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockacmCertFinder_FindCertInACM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCertInACM'
type MockacmCertFinder_FindCertInACM_Call struct {
	*mock.Call
}

// FindCertInACM is a helper method to define mock.On call
//   - ctx context.Context
//   - certBundle *certificateBundle
func (_e *MockacmCertFinder_Expecter) FindCertInACM(ctx interface{}, certBundle interface{}) *MockacmCertFinder_FindCertInACM_Call {
	return &MockacmCertFinder_FindCertInACM_Call{Call: _e.mock.On("FindCertInACM", ctx, certBundle)}
}

func (_c *MockacmCertFinder_FindCertInACM_Call) Run(run func(ctx context.Context, certBundle *certificateBundle)) *MockacmCertFinder_FindCertInACM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*certificateBundle))
	})
	return _c
}

func (_c *MockacmCertFinder_FindCertInACM_Call) Return(_a0 string, _a1 error) *MockacmCertFinder_FindCertInACM_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockacmCertFinder_FindCertInACM_Call) RunAndReturn(run func(context.Context, *certificateBundle) (string, error)) *MockacmCertFinder_FindCertInACM_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcmApi provides a mock function with given fields:
func (_m *MockacmCertFinder) GetAcmApi() acmApi {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAcmApi")
	}

	var r0 acmApi
	if rf, ok := ret.Get(0).(func() acmApi); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(acmApi)
		}
	}

	return r0
}

// MockacmCertFinder_GetAcmApi_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcmApi'
type MockacmCertFinder_GetAcmApi_Call struct {
	*mock.Call
}

// GetAcmApi is a helper method to define mock.On call
func (_e *MockacmCertFinder_Expecter) GetAcmApi() *MockacmCertFinder_GetAcmApi_Call {
	return &MockacmCertFinder_GetAcmApi_Call{Call: _e.mock.On("GetAcmApi")}
}

func (_c *MockacmCertFinder_GetAcmApi_Call) Run(run func()) *MockacmCertFinder_GetAcmApi_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockacmCertFinder_GetAcmApi_Call) Return(_a0 acmApi) *MockacmCertFinder_GetAcmApi_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockacmCertFinder_GetAcmApi_Call) RunAndReturn(run func() acmApi) *MockacmCertFinder_GetAcmApi_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCertAdded provides a mock function with given fields: certBundle, arn
func (_m *MockacmCertFinder) NotifyCertAdded(certBundle *certificateBundle, arn string) {
	_m.Called(certBundle, arn)
}

// MockacmCertFinder_NotifyCertAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCertAdded'
type MockacmCertFinder_NotifyCertAdded_Call struct {
	*mock.Call
}

// NotifyCertAdded is a helper method to define mock.On call
//   - certBundle *certificateBundle
//   - arn string
func (_e *MockacmCertFinder_Expecter) NotifyCertAdded(certBundle interface{}, arn interface{}) *MockacmCertFinder_NotifyCertAdded_Call {
	return &MockacmCertFinder_NotifyCertAdded_Call{Call: _e.mock.On("NotifyCertAdded", certBundle, arn)}
}

func (_c *MockacmCertFinder_NotifyCertAdded_Call) Run(run func(certBundle *certificateBundle, arn string)) *MockacmCertFinder_NotifyCertAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificateBundle), args[1].(string))
	})
	return _c
}

func (_c *MockacmCertFinder_NotifyCertAdded_Call) Return() *MockacmCertFinder_NotifyCertAdded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockacmCertFinder_NotifyCertAdded_Call) RunAndReturn(run func(*certificateBundle, string)) *MockacmCertFinder_NotifyCertAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCertDeleted provides a mock function with given fields: arn
func (_m *MockacmCertFinder) NotifyCertDeleted(arn string) {
	_m.Called(arn)
}

// MockacmCertFinder_NotifyCertDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCertDeleted'
type MockacmCertFinder_NotifyCertDeleted_Call struct {
	*mock.Call
}

// NotifyCertDeleted is a helper method to define mock.On call
//   - arn string
func (_e *MockacmCertFinder_Expecter) NotifyCertDeleted(arn interface{}) *MockacmCertFinder_NotifyCertDeleted_Call {
	return &MockacmCertFinder_NotifyCertDeleted_Call{Call: _e.mock.On("NotifyCertDeleted", arn)}
}

func (_c *MockacmCertFinder_NotifyCertDeleted_Call) Run(run func(arn string)) *MockacmCertFinder_NotifyCertDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockacmCertFinder_NotifyCertDeleted_Call) Return() *MockacmCertFinder_NotifyCertDeleted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockacmCertFinder_NotifyCertDeleted_Call) RunAndReturn(run func(string)) *MockacmCertFinder_NotifyCertDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockacmCertFinder creates a new instance of MockacmCertFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockacmCertFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockacmCertFinder {
	mock := &MockacmCertFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.1. DO NOT EDIT.

package aws

import (
	context "context"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"

	mock "github.com/stretchr/testify/mock"
)

// MockcloudfrontApi is an autogenerated mock type for the cloudfrontApi type
type MockcloudfrontApi struct {
	mock.Mock
}

type MockcloudfrontApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcloudfrontApi) EXPECT() *MockcloudfrontApi_Expecter {
	return &MockcloudfrontApi_Expecter{mock: &_m.Mock}
}

// GetDistributionConfig provides a mock function with given fields: ctx, params, optFns
func (_m *MockcloudfrontApi) GetDistributionConfig(ctx context.Context, params *cloudfront.GetDistributionConfigInput, optFns ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionConfig")
	}

	var r0 *cloudfront.GetDistributionConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) *cloudfront.GetDistributionConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.GetDistributionConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockcloudfrontApi_GetDistributionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistributionConfig'
type MockcloudfrontApi_GetDistributionConfig_Call struct {
	*mock.Call
}

// GetDistributionConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudfront.GetDistributionConfigInput
//   - optFns ...func(*cloudfront.Options)
func (_e *MockcloudfrontApi_Expecter) GetDistributionConfig(ctx interface{}, params interface{}, optFns ...interface{}) *MockcloudfrontApi_GetDistributionConfig_Call {
	return &MockcloudfrontApi_GetDistributionConfig_Call{Call: _e.mock.On("GetDistributionConfig",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockcloudfrontApi_GetDistributionConfig_Call) Run(run func(ctx context.Context, params *cloudfront.GetDistributionConfigInput, optFns ...func(*cloudfront.Options))) *MockcloudfrontApi_GetDistributionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudfront.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudfront.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudfront.GetDistributionConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockcloudfrontApi_GetDistributionConfig_Call) Return(_a0 *cloudfront.GetDistributionConfigOutput, _a1 error) *MockcloudfrontApi_GetDistributionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockcloudfrontApi_GetDistributionConfig_Call) RunAndReturn(run func(context.Context, *cloudfront.GetDistributionConfigInput, ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error)) *MockcloudfrontApi_GetDistributionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *MockcloudfrontApi) UpdateDistribution(ctx context.Context, params *cloudfront.UpdateDistributionInput, optFns ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistribution")
	}

	var r0 *cloudfront.UpdateDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) *cloudfront.UpdateDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfront.UpdateDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockcloudfrontApi_UpdateDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDistribution'
type MockcloudfrontApi_UpdateDistribution_Call struct {
	*mock.Call
}

// UpdateDistribution is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudfront.UpdateDistributionInput
//   - optFns ...func(*cloudfront.Options)
func (_e *MockcloudfrontApi_Expecter) UpdateDistribution(ctx interface{}, params interface{}, optFns ...interface{}) *MockcloudfrontApi_UpdateDistribution_Call {
	return &MockcloudfrontApi_UpdateDistribution_Call{Call: _e.mock.On("UpdateDistribution",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockcloudfrontApi_UpdateDistribution_Call) Run(run func(ctx context.Context, params *cloudfront.UpdateDistributionInput, optFns ...func(*cloudfront.Options))) *MockcloudfrontApi_UpdateDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudfront.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudfront.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudfront.UpdateDistributionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockcloudfrontApi_UpdateDistribution_Call) Return(_a0 *cloudfront.UpdateDistributionOutput, _a1 error) *MockcloudfrontApi_UpdateDistribution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockcloudfrontApi_UpdateDistribution_Call) RunAndReturn(run func(context.Context, *cloudfront.UpdateDistributionInput, ...func(*cloudfront.Options)) (*cloudfront.UpdateDistributionOutput, error)) *MockcloudfrontApi_UpdateDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcloudfrontApi creates a new instance of MockcloudfrontApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcloudfrontApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcloudfrontApi {
	mock := &MockcloudfrontApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocker

import (
	domain "github.com/ichenhe/cert-deployer/domain"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockDeployerFactory is an autogenerated mock type for the DeployerFactory type
type MockDeployerFactory struct {
	mock.Mock
}

type MockDeployerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeployerFactory) EXPECT() *MockDeployerFactory_Expecter {
	return &MockDeployerFactory_Expecter{mock: &_m.Mock}
}

// NewDeployer provides a mock function with given fields: logger, cloudProvider
func (_m *MockDeployerFactory) NewDeployer(logger *zap.SugaredLogger, cloudProvider domain.CloudProvider) (domain.Deployer, error) {
	ret := _m.Called(logger, cloudProvider)

	if len(ret) == 0 {
		panic("no return value specified for NewDeployer")
	}

	var r0 domain.Deployer
	var r1 error
	if rf, ok := ret.Get(0).(func(*zap.SugaredLogger, domain.CloudProvider) (domain.Deployer, error)); ok {
		return rf(logger, cloudProvider)
	}
	if rf, ok := ret.Get(0).(func(*zap.SugaredLogger, domain.CloudProvider) domain.Deployer); ok {
		r0 = rf(logger, cloudProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Deployer)
		}
	}

	if rf, ok := ret.Get(1).(func(*zap.SugaredLogger, domain.CloudProvider) error); ok {
		r1 = rf(logger, cloudProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployerFactory_NewDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDeployer'
type MockDeployerFactory_NewDeployer_Call struct {
	*mock.Call
}

// NewDeployer is a helper method to define mock.On call
//   - logger *zap.SugaredLogger
//   - cloudProvider domain.CloudProvider
func (_e *MockDeployerFactory_Expecter) NewDeployer(logger interface{}, cloudProvider interface{}) *MockDeployerFactory_NewDeployer_Call {
	return &MockDeployerFactory_NewDeployer_Call{Call: _e.mock.On("NewDeployer", logger, cloudProvider)}
}

func (_c *MockDeployerFactory_NewDeployer_Call) Run(run func(logger *zap.SugaredLogger, cloudProvider domain.CloudProvider)) *MockDeployerFactory_NewDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zap.SugaredLogger), args[1].(domain.CloudProvider))
	})
	return _c
}

func (_c *MockDeployerFactory_NewDeployer_Call) Return(_a0 domain.Deployer, _a1 error) *MockDeployerFactory_NewDeployer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployerFactory_NewDeployer_Call) RunAndReturn(run func(*zap.SugaredLogger, domain.CloudProvider) (domain.Deployer, error)) *MockDeployerFactory_NewDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeployerFactory creates a new instance of MockDeployerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeployerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeployerFactory {
	mock := &MockDeployerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
